/* eslint-disable no-unused-vars */
import { makeAugmentedSchema } from 'neo4j-graphql-js'
import { typeDefs, resolvers } from './graphql-schema'
import { ApolloServer } from 'apollo-server-express'
import express from 'express'
import neo4j, { session } from 'neo4j-driver'
import dotenv from 'dotenv'
import jwt from 'express-jwt'
//import context from 'react-bootstrap/esm/AccordionContext'

const filePath = require('path')
const fs = require('fs')
// set environment variables from .env
dotenv.config()

const app = express()
app.use(express.json())

const checkErrorHeaderMiddleware = async (req, res, next) => {
  req.error = req.headers['x-error']
  next()
}

app.use('*', checkErrorHeaderMiddleware)
/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

const schema = makeAugmentedSchema({
  typeDefs,
  resolvers,
  config: {
    query: {
      exclude: ['RatingCount', 'AuthToken'],
    },
    mutation: {
      exclude: ['RatingCount', 'AuthToken'],
    },
    auth: {
      isAuthenticated: true,
      hasRole: false,
    },
  },
})

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
  process.env.NEO4J_URI || 'bolt://localhost:7687',
  neo4j.auth.basic(
    process.env.NEO4J_USER || 'neo4j',
    process.env.NEO4J_PASSWORD || 'neo4j'
  )
)

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer({
  context: ({ req }) => {
    return {
      headers: req.headers,
      req,
      driver,
      cypherParams: {
        userId: req?.user?.userId,
      },
      neo4jDatabase: process.env.NEO4J_DATABASE,
    }
  },
  schema: schema,
  introspection: false,
  playground: true,
})

// Specify host, port and path for GraphQL endpoint
const port = process.env.GRAPHQL_SERVER_PORT || 4001
const path = process.env.GRAPHQL_SERVER_PATH || '/graphql'
const host = process.env.GRAPHQL_SERVER_HOST || '0.0.0.0'

app.use(
  jwt({
    secret: process.env.JWT_SECRET,
    algorithms: ['HS256'],
    credentialsRequired: false,
  })
)

/*
 * Optionally, apply Express middleware for authentication, etc
 * This also also allows us to specify a path for the GraphQL endpoint
 */
server.applyMiddleware({ app, path })

app.listen({ host, port, path }, () => {
  console.log(`GraphQL server ready at http://${host}:${port}${path}`)
})
